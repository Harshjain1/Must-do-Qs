->balanced parathesis
public static boolean balancesparathesis(String str){
    Stack<Character> st = new Stack<>();
    for(int i=0;i<str.length();i++){
        char ch = str.charAt(i);
        if(ch=='['||ch=='{'||ch=='('){
            st.push(ch);
        }
        else if(ch==']'){
            if(st.isEmpty() || st.peek()!='['){
                return false;
            }
            st.pop();
        }
        else if(ch=='}'){
            if(st.isEmpty() || st.peek()!='{'){
                return false;
            }
            st.pop();
        }
        else if(ch==')'){
            if(st.isEmpty() || st.peek()!='('){
                return false;
            }
            st.pop();
        }
        else{
            continue;
        }
    }
    return st.size()==0;
}

->next larger element

public static int[] nextlargerelement(int[] arr){
    int[] res = new int[arr.length];
    Stack<Integer> st = new Stack<>();
    st.push(0);
    for(int i=1;i<arr.length;i++){
        while(st.size()>0 && arr[st.peek()]<arr[i]){
            res[st.pop()]=i;
        }
        st.push(i);
    }
    while(st.size()>0){
        res[st.pop()]=-1;
    }
    return res;
}

->largest histogram

public static int largestrectanglearea(int[] arr){
    int[] lres = leftsmaller(arr);
    int[] rres = rightsmaller(arr);
    int area = 0;
    for(int i=0;i<arr.length;i++){
        int length = rres[i]-lres[i]-1;
        int breadth = arr[i];
        if(length*breadth > area){
            area = length*breadth;
        }
    }
    return area;
}

public static int[] leftsmaller(int[] arr){
    int[] res = new int[arr.length];
    Stack<Integer> st = new Stack<>();
    st.push(arr.length-1);
    for(int i=arr.length-2;i>=0;i--){
        while(st.size()>0 && arr[st.peek()]>arr[i]){
            res[st.pop()]=i;
        }
        st.push(i);
    }
    while(st.size()>0){
        res[st.pop()]=-1;
    }
    return res;
}

public static int[] rightsmaller(int[] arr){
    int[] res = new int[arr.length];
    Stack<Integer> st = new Stack<>();
    st.push(0);
    for(int i=1;i<arr.length;i++){
        while(st.size()>0 && arr[st.peek()]>arr[i]){
            res[st.pop()]=i;
        }
        st.push(i);
    }
    while(st.size()>0){
        res[st.pop()]=arr.length;
    }
    return res;
}


->stack using two queue

//push efficient
public static class StackFromQueue{
    Queue<Integer> mainq;
    Queue<Integer> childq;
    
    public StackFromQueue(){
        mainq = new ArrayDeque<>();
        childq = new ArrayDeque<>();
    }
    
    int size(){
        return mainq.size();
    }
    
    void push(int num){
        mainq.add(num);
        return ;
    }
    
    int pop(){
        if(mainq.size()==0){
            System.out.print("Underflow");
            return -1;
        }
        while(mainq.size()>1){
            childq.add(mainq.remove());
        }
        int val = mainq.remove();
        while(childq.size()>0){
            mainq.add(childq.remove());
        }
        return val;
    }
    
    int top(){
        if(mainq.size()==0){
            System.out.print("Underflow");
            return -1;
        }
        while(mainq.size()>1){
            childq.add(mainq.remove());
        }
        int val = mainq.peek();
        childq.add(mainq.remove());
        while(childq.size()>0){
            mainq.add(childq.remove());
        }
        return val;
    }
}

//pop efficient
public static class StackFromQueue{
    Queue<Integer> mainq ;
    Queue<Integer> childq;
    
    public StackFromQueue(){
        mainq = new ArrayDeque<>();
        childq = new ArrayDeque<>();
    }
    
    void push(int val){
        childq.add(val);
        while(mainq.size()>0){
            childq.add(mainq.remove());
        }
        mainq = childq;
        childq = new ArrayDeque<>();
        return ;
    }
    
    int pop(){
        if(mainq.size()==0){
            System.out.print("underflow");
            return -1;
        }
        return mainq.remove();
    }
    
    int top(){
        if(mainq.size()==0){
            System.out.print("underflow");
            return -1;
        }
        return mainq.peek();
    }
    
    int size(){
        return mainq.size();
    }
}

->queue using two stack

//add efficient
public static void QueueFromStack{
    Stack<Integer> mains;
    Stack<Integer> childs;
    QueueFromStack(){
        mains = new Stack<>();
        childs = new Stack<>();
    }
    
    void add(int val){
        mains.push(val);
        return ;
    }
    
    int remove(){
        if(mains.size()==0){
            System.out.print("Queue Underflow");
            return -1;
        }
        while(mains.size()>1){
            childs.push(mains.pop());
        }
        int val = mains.pop();
        while(childs.size()>0){
            mains.push(childs.pop());
        }
        return val;
    }
    
    int peek(){
        if(mains.size()==0){
            System.out.print("Queue Underflow");
            return -1;
        }
        while(mains.size()>1){
            childs.push(mains.pop());
        }
        int val = mains.peek();
        childs.push(mains.pop());
        while(childs.size()>0){
            mains.push(childs.pop());
        }
        return val;
    }
    
    int size(){
        return mains.size();
    }
}

//remove efficient
public static void QueueFromStack{
    Stack<Integer> mains;
    Stack<Integer> childs;
    
    QueueFromStack(){
        mains = new Stack<>();
        childs = new Stack<>();
    }
    
    int remove(){
        if (mainS.size() == 0){
            System.out.println("Queue underflow");
            return -1;
        }
        int val = mains.pop();
        return val;
    }
    
    void add(int val){
        while(mains.size()>0){
            childs.push(helpers.pop());
        }
        childs.push(val);
        while(childs.size()>0){
            mains.push(childs.pop());
        }
        return ;
    }
    
    int peek(){
        if (mainS.size() == 0){
            System.out.println("Queue underflow");
            return -1;
        }
        int val = mains.peek();
        return val;
    }
    
    int size(){
        return mains.size();
    }
}

->minimum element from stack
->LRU cache
->LFU 
->circular tour
->first non repeating character from stream
->rotten oranges
->maximum of all subarrays of size k
->sliding window maximum
