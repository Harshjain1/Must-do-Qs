->balanced parathesis
public static boolean balancesparathesis(String str){
    Stack<Character> st = new Stack<>();
    for(int i=0;i<str.length();i++){
        char ch = str.charAt(i);
        if(ch=='['||ch=='{'||ch=='('){
            st.push(ch);
        }
        else if(ch==']'){
            if(st.isEmpty() || st.peek()!='['){
                return false;
            }
            st.pop();
        }
        else if(ch=='}'){
            if(st.isEmpty() || st.peek()!='{'){
                return false;
            }
            st.pop();
        }
        else if(ch==')'){
            if(st.isEmpty() || st.peek()!='('){
                return false;
            }
            st.pop();
        }
        else{
            continue;
        }
    }
    return st.size()==0;
}

->next larger element

public static int[] nextlargerelement(int[] arr){
    int[] res = new int[arr.length];
    Stack<Integer> st = new Stack<>();
    st.push(0);
    for(int i=1;i<arr.length;i++){
        while(st.size()>0 && arr[st.peek()]<arr[i]){
            res[st.pop()]=i;
        }
        st.push(i);
    }
    while(st.size()>0){
        res[st.pop()]=-1;
    }
    return res;
}

->largest histogram

public static int largestrectanglearea(int[] arr){
    int[] lres = leftsmaller(arr);
    int[] rres = rightsmaller(arr);
    int area = 0;
    for(int i=0;i<arr.length;i++){
        int length = rres[i]-lres[i]-1;
        int breadth = arr[i];
        if(length*breadth > area){
            area = length*breadth;
        }
    }
    return area;
}

public static int[] leftsmaller(int[] arr){
    int[] res = new int[arr.length];
    Stack<Integer> st = new Stack<>();
    st.push(arr.length-1);
    for(int i=arr.length-2;i>=0;i--){
        while(st.size()>0 && arr[st.peek()]>arr[i]){
            res[st.pop()]=i;
        }
        st.push(i);
    }
    while(st.size()>0){
        res[st.pop()]=-1;
    }
    return res;
}

public static int[] rightsmaller(int[] arr){
    int[] res = new int[arr.length];
    Stack<Integer> st = new Stack<>();
    st.push(0);
    for(int i=1;i<arr.length;i++){
        while(st.size()>0 && arr[st.peek()]>arr[i]){
            res[st.pop()]=i;
        }
        st.push(i);
    }
    while(st.size()>0){
        res[st.pop()]=arr.length;
    }
    return res;
}
