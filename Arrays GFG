->spirally traversing a matrix

public static void traverse(int[][] arr){
    int n = arr.length;
    int m = arr[0].length;
    int rmin=0,rmax=n-1;
    int cmin=0,cmax=m-1;
    int tel=n*m;
    while(tel>0){
        for(int i=rmin;i<=rmax && tel>0;i++){
            System.out.println(arr[i][cmin]);
            tel--;
        }
        cmin++;
        for(int j=cmin;j<=cmax && tel>0;j++){
            System.out.println(arr[rmax][j]);
            tel--;
        }
        rmax--;
        for(int i=rmax;i>=rmin && tel>0;i--){
            System.out.println(arr[i][cmax]);
            tel--;
        }
        cmax--;
        for(int j=cmax;j>=cmin && tel>0;j--){
            System.out.println(arr[rmin][j]);
            tel--;
        }
        rmin++;
    }
    return ;
}

->sort an array of 0's,1's and 2's

//Method I apply sorting 

//Method II count freq of 0,1 and 2 and fill accordingly

//Method III

public void sortColors(int[] nums){
    int low=0,mid=0;
    int high = nums.length-1;
    while(mid<=high){
        if(nums[mid]==0){
            swap(nums,low,mid);
            low++;
            mid++;
        }
        else if(nums[mid]==1){
            mid++;
        }
        else{
            swap(nums,mid,high);
            high--;
        }
    }
}

->trapping rain water

public static int getWater(int arr[], int n){
	int res = 0;

	int lMax[] = new int[n];
	int rMax[] = new int[n];

	lMax[0] = arr[0];
	for(int i = 1; i < n; i++)
		lMax[i] = Math.max(arr[i], lMax[i - 1]);


	rMax[n - 1] = arr[n - 1];
	for(int i = n - 2; i >= 0; i--)
		rMax[i] = Math.max(arr[i], rMax[i + 1]);

	for(int i = 1; i < n - 1; i++)
		res = res + (Math.min(lMax[i], rMax[i]) - arr[i]);
	
	return res;
}

->equilibrium point

public static int eqbpoint(int[] arr){
    int sum = 0;
    for(int i=0;i<arr.length;i++){
        sum += arr[i];
    }
    int lsum = 0;
    for(int i=0;i<arr.length;i++){
        if(lsum == sum-arr[i]){
            return i;
        }
        lsum += arr[i];
        sum -= arr[i];
    }
    return -1;
}

->kadane's algorithm (Maximum subarray sum)

public static int maximumsubarray(int[] arr){
    int res = arr[0];
    int maxending = arr[0];
    for(int i=1;i<arr.length;i++){
        //maxending is maximum sum ending with current element
        maxending = Math.max(maxending+arr[i],arr[i]); 
        res = Math.max(res,maxending);
    }
    return res;
}

->leaders in an array

public static void leaders(int[] arr){
    int curr_ldr = arr[arr.length-1];
    System.out.print(curr_ldr);
    for(int i=arr.length-2;i>=0;i--){
        if(arr[i]>curr_ldr){
            curr_ldr = arr[i];
            System.out.print(curr_ldr);
        }
    }
    return ;
}

->missing numbers in an array

public static int MissingNumber(int[] arr,int n){
   int res = 0;
   for(int i=0;i<arr.length;i++){
       res = res^arr[i];
   }
   for(int i=1;i<=n;i++){
       res = res^i;
   }
   return res;
}

->subarray with given sum

int subArraySum(int[] arr,int sum){ 
int curr_sum = arr[0], start = 0; 
int n = arr.length;
// Pick a starting point 
for (int i = 1; i <= n; i++){ 
	// If curr_sum exceeds the sum, then remove the starting elements 
	while (curr_sum > sum && start < i-1){ 
		curr_sum = curr_sum - arr[start]; 
		start++; 
	} 
	// If curr_sum becomes equal to sum, then return true 
	if (curr_sum == sum){ 
		int p = i-1; 
		System.out.println("Sum found between indexes " + start + " and " + p); 
		return 1; 
	} 
	// Add this element to curr_sum 
	if (i < n) 
	curr_sum = curr_sum + arr[i];
}
System.out.print("no subarray found");
return 0;
}

->element with left side smaller and right side greater

public static void leftside(int[] arr){
    int n = arr.length;
    int[] lmax = new int[n];
    int[] rmin = new int[n];
    lmax[0] = arr[0];
    rmax[n-1] = arr[n-1];
    for(int i=1;i<n;i++){
        lmax[i] = Math.max(lmax[i-1],arr[i-1]);
    }
    for(int i=n-2;i>=0;i--){
        rmax[i] = Math.min(rmax[i+1],arr[i+1]);
    }
    for(int i=0;i<n;i++){
        if(lmax[i]<=arr[i] && rmax[i]>=arr[i]){
            System.out.print(arr[i]);
        }
    }
    return ;
}

->find the duplicate number

//Method I
//sort the array and compare adjacent elements 
//when two adjacent elements are same 
//that will be the result
time complexity -> O(nlogn)

//Method II
public static int duplicatenumber(int[] arr){
    int slow = arr[0];
    int fast = arr[0];
    slow = arr[slow];
    fast = arr[arr[fast]];
    while(slow!=fast){
        slow = arr[slow];
        fast = arr[arr[fast]];
    }
    fast = arr[0];
    while(slow!=fast){
        slow = arr[slow];
        fast = arr[arr[fast]];
    }
    return slow;
}

->missing and repeating number

//Method I
//make a frequency array equal size
//put elements in the array
//again traverse freq array and check the freq of all 
//elements ,if freq is 0 that is missing element
//if freq is 2 that is repeating element


//method II
public static void missingandrepeating(int[] arr){
    int xor1 = 0;
    int n = arr.length;
    for(int i=1;i<=n;i++){
        xor1 = xor1^i;
    }
    for(int i=0;i<n;i++){
        xor1 = xor1^arr[i];
    }
    int res = xor1&~(xor1-1);
    int num1 = 0;
    int num2 = 0;
    for(int i=0;i<n;i++){
        if(arr[i]&&res){
            num1 = num1^arr[i];
        }
        else{
            num2 = num2^arr[i];
        }
    }
    for(int i=1;i<=n;i++){
        if(i&&res){
            num1 = num1^i;
        }
        else{
            num2 = num2^i;
        }
    }
    System.out.print(num1 +" "+num2);
}

->merge two sorted array 

//method I
//take a array of size n1 + n2
//sort the array and fill
//the array1 and array2 

//method II
public static void merge(int[] X,int[] Y){
    int m = X.length;
    int n = Y.length;
    for(int i=0;i<m;i++){
        if(X[i]>Y[0]){
            int temp = X[i];
            X[i] = Y[0];
            Y[0] = temp;
            
            int first = Y[0];
            for(int k=1;k<n && Y[k]<first;k++){
                Y[k-1] = Y[k];
            }
            Y[k-1] = first;
        }
    }
}

->merge intervals

public static void mergeinterval(int[][] intervals){
    List<int[]> res = new ArrayList<>();
    
    if(intervals.length==0 || intervals==null){
        return res.toArray(new int[0][]);
    }
    
    Arrays.sort(intervals,(a,b)->a[0]-b[0]);
    
    int start = intervals[0][0];
    int end = intervals[0][1];
    
    for(int[] i : intervals){
        if(i[0]<=end){
            end = Math.max(i[1],end);
        }
        else{
            res.add(new int[]{start,end});
            start = i[0];
            end = i[1];
        }
    }
    res.add(new int[]{start,end});
    return res.toArray(new int[0][]);
}

->set matrix zeros

//method I
first traverse the given 2d array and check the values of array
as soon as you find the 0 traverse along that row and column and 
replace value with the digit that is not in input range for given 
array like replace with -1 ,again traverse the array and as you see -1
replace it with 0

//method II
public static void setmatrixzero(int[][] matrix){
    int n = matrix.length;
    int m = matrix[0].length;
    int[] row = new int[n];
    int[] col = new int[m];
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(matrix[i][j]==0){
                row[i]=0;
                col[j]=0;
            }
        }
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(row[i]==0 || col[j]==0){
                matrix[i][j]=0;
            }
        }
    }
}

->pascal traiangle

public static void binomialPattern(int n){
    for (int i = 0; i < n; i++) {
        int ncr = 1;
        for (int j = 0; j <= i; j++) {
            System.out.print(ncr + "\t");
            int ncr1 = ((i - j) * ncr) / (j + 1);
            ncr = ncr1;
        }
        System.out.println();
    }
}

->next permutation of an array

public void nextPermutation(int[] nums){
    int n = nums.length;
    int idx1 = 0;
    boolean flag = false;
    for(int i=n-2;i>=0;i--){
        if(nums[i+1]>nums[i]){
            idx1 = i;
            flag = true;
            break;
        }
    }
    if(flag == false){
        reverse(nums,0,n-1);
        return ;
    }
    for(int j=n-1;j>=0;j--){
        if(nums[j]>nums[idx1]){
            int temp = nums[idx1];
            nums[idx1] = nums[j];
            nums[j] = temp;
            break;
        }
    }
    reverse(nums,idx1+1,n-1);
    return ;
}

->count inversions in an array

//method I
check for every element how many element are smaller
and is on left side of the given element and add it in the counter
return the value of the counter
time complexity ->O(n^2)

//method II
public static int mergesort(int[] arr,int[] temp,int left,int right){
    int mid,inv_count=0;
    if(left>right){
        int mid = (left+right)/2;
        inv_count += mergesort(arr,temp,left,mid);
        inv_count += mergesort(arr,temp,mid+1,right);
        inv_count += merge(arr,temp,left,mid+1,right);
    }
    return inv_count;
}

public static int merge(int[] arr,int[] temp,int left,int mid,int right){
    int i = left; //frist index of first half
    int j = mid;  //first index of second half
    int k = left; //index of resultant array
    
    int inv_count = 0;
    while((i<=mid-1) && (j<=right)){
        if(arr[i]<=arr[j]){
            temp[k++] = arr[i++];
        }
        else{
            temp[k++] = arr[j++];
            
            inv_count += mid-i;
        }
    }
    
    while(i<=mid-1){
        temp[k++] = arr[i++];
    }
    while(j<=right){
        temp[k++] = arr[j++];
    }
    for(i=left;i<=right;i++){
        arr[i]=temp[i];
    }
    return inv_count;
}

->maximum profit from stock buy only once and sell only once

public static int profit(int[] prices){
    int profit = 0;
    int minimum = Integer.MIN_VALUE;
    for(int i=0;i<prices.length;i++){
        minimum = Math.min(prices[i],minimum);
        profit = Math.max(profit,prices[i]-minimum);
    }
    return profit;
}

->rotate image

//method I
use extra space and place the values and the new matrix 
according to the order we want as result

//method II
public static void rotate(int[][] matrix){
    int n = matrix.length;
    int m = matrix[0].length;
    for(int i=0;i<n;i++){
        for(int j=i;j<m;j++){
            int temp = arr[i][j];
            arr[i][j] = arr[j][i];
            arr[j][i] = temp;
        }
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m/2;j++){
            int temp = matrix[i][j];
            matrix[i][j] = matrix[i][m-1-j];
            matrix[i][m-1-j] = temp;
        }
    }
    return ;
}

->search in a 2d matrix
//method I
do linear search in the matrix
time compexity->o(n^2)

//method II
public boolean searchMatrix(int[][] matrix, int target){
    int n = matrix.length;
    int m = matrix[0].length;
    int i = 0;
    int j = m-1;
    while(i<n && j>=0)
    {
        if(matrix[i][j]==target)
        {
            return true;
        }
        else if(matrix[i][j]>target)
        {
            j--;
        }
        else
        {
            i++;
        }
    }
    return false;
}

//method III
only applicable if the last element of first row
is smaller than the first element of last row
public static boolean findele(int[][] matrix,int target){
    if(matrix.length==0){
        return false;
    }
    int n = matrix.length;
    int m = matrix[0].length;
    
    int lo=0;
    int hi=n*m-1;
    while(lo<=hi){
        int mid = lo + (hi-lo)/2;
        if(matrix[mid/m][mid%m]==target){
            return true;
        }
        else if(matrix[mid/m][mid%m]>target){
            lo = mid+1;
        }
        else{
            hi = mid-1;
        }
    }
    return false;
}

->majority element I

//method I
at every element count it frequency
and as you find the freq greater than half the size
of array return that element

//method II
use a hashmap and fill the key value pairs
in it and at last traverse around the value

public static int findmajority(int[] arr){
    int count = 0;
    int res = 0;
    for(int ele : arr){
        if(count==0){
            res = ele;
        }
        if(ele == res){
            count+=1;
        }
        else{
            count-=1;
        }
    }
    return res;
}

->majority element II

public static void majorityelementII(int[] arr){
    int c1=0,c2=0;
    int e1=-1,e2=-1;
    for(int ele : arr){
        if(c1==0){
            e1 = ele;
            c1 = 1;
        }
        else if(c2==0){
            e2 = ele;
            c2 = 1;
        }
        else if(e1==ele){
            c1 += 1;
        }
        else if(e2==ele){
            c2 += 1;
        }
        else{
            c1 -= 1;
            c2 -= 1;
        }
    }
    System.out.print(e1+" "+e2);
    return ;
}

->count triplets
->number of pairs
->convert array into zig zag fashion
->last index of 1
->largest number formed from an array
->stock buy and sell
->pythagorean triplet
->chocolate distribution problem
->minimum platforms
->reverse array in groups
->kth smallest element
->rearrange arrays alternatively
